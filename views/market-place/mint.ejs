<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mint - Tajiri</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>

    <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
    <div class="nav-wrapper" style="z-index: 10;">
        <nav class="navbar" style="z-index: 11;">
          <img src="/img/logos/logo-no-background.png" alt="Company Logo">
          <div class="menu-toggle" id="mobile-menu">
            <span class="bar"></span>
            <span class="bar"></span>
            <span class="bar"></span>
          </div>
          <ul class="nav no-search" style="z-index: 12;">
            <li class="nav-item"><button class="nav-cta-btn" id="connectButton" style="margin-left: 30px;">Connect Wallet</button></li>
            <li class="nav-item"><button class="nav-cta-btn" id="disconnectButton" style="display: none; margin-left: 30px;"></button></li>
            <li class="nav-item"><a href="/trade/p2p"><button class="nav-cta-btn" id="" style="margin-left: 30px;">P2P market</button></a></li>
            <li><a href="/trade"><button class="nav-cta-btn" style="margin-left: 30px;">How to trade</button></a></li>
            <div id="walletAddress" style="display: none;"></div>
    
          </ul>
        </nav>
      </div>


<div class="container">
  <form action="" method="get" class="mx-auto my-5" style="max-width: 700px;">
    <div class="my-3 display-6 fs-3">Mint new stocks</div>

    <div class="border rounded p-2 my-2" id="transactionDetails" style="background-color: rgb(196, 215, 231); display: none;">
      <div>Transaction hash is <span id="txHash"></span></div>
      <div><a href="" target="_blank" id="txLink"></a></div>
    </div>

    <div class="form-group mb-3">
      <label for="stockName" class="form-label">Stock name</label>
      <input type="text" name="stockName" id="stockName" value="SAFARICOM SHARES" class="form-control" disabled>
    </div>

    <div class="form-group mb-3">
      <label for="stockSymbol" class="form-label">Stock symbol</label>
      <div class="input-group">
        <span class="input-group-text"><img src="/img/stocks/SCOM.jpeg" width="25px" height="25px" alt=""></span>
        <input type="text" name="stockSymbol" id="stockSymbol" value="SCOM" class="form-control" disabled>

      </div>
    </div>


    <div class="form-group mb-3">
      <label for="stockPriceEth" class="form-label">Stock current price</label>
      <div class="input-group">
          <span class="input-group-text">ETH</span>
          <input type="text" name="stockPriceEth" class="form-control" id="stockPriceEth" value="0.0000485" disabled>
      </div>
    </div>

    <div class="form-group mb-3">
      <label for="amountOfStocks" class="form-label">Amount of stocks to mint</label>
      <div class="input-group">
        <!-- <span class="input-group-text">SCOM</span> -->
         <input type="text" name="amountOfStocks" id="amountOfStocks" class="form-control" placeholder="Enter amount">
      </div>
    </div>

    <div class="form-group mb-3">
      <label for="totalToPay" class="form-label">Total amount to pay</label>
      <div class="input-group">
        <span class="input-group-text">ETH</span>
        <input type="text" name="totalToPay" id="totalToPay" class="form-control" value="0" disabled>
      </div>
    </div>

    <div class="w-100 text-center">
      <button type="button" class="btn btn-outline-primary w-100 mx-auto">Start minting</button>
    </div>

    <div class="w-100 my-2 text-center">
      <button id="importTokenBtn" type="button" class="btn btn-danger w-100 mx-auto">
          Import Token to wallet
      </button>
  </div>
  

  </form>
</div>


      <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">

      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>

      <script>
                $(document).ready(function() {
            // Get stock price from the input field
            const stockPriceEth = parseFloat($('#stockPriceEth').val());

            // When user enters amount of stocks, calculate total to pay
            $('#amountOfStocks').on('input', function() {
                const amountOfStocks = parseFloat($(this).val()) || 0; // Default to 0 if empty
                const totalToPay = (amountOfStocks * stockPriceEth).toFixed(7); // Fixed to 6 decimals for ETH precision

                // Set the calculated total to pay
                $('#totalToPay').val(totalToPay);
            });
        });

      </script>

      <script>
        $("#search-icon").click(function() {
            $(".nav").toggleClass("search");
            $(".nav").toggleClass("no-search");
            $(".search-input").toggleClass("search-active");
            });
    
            $('.menu-toggle').click(function(){
            $(".nav").toggleClass("mobile-nav");
            $(this).toggleClass("is-active");
            });
    
    </script>

    
  <script type="text/javascript">
    const connectButton = document.getElementById('connectButton');
    const disconnectButton = document.getElementById('disconnectButton');
    const p2pMarket = document.getElementById('p2pMarket')
    const walletAddressDisplay = document.getElementById('walletAddress');
  
    // Function to format the wallet address
    function formatWalletAddress(address) {
      const firstPart = address.slice(0, 5); // First 5 characters
      const lastPart = address.slice(-3); // Last 3 characters
      return `${firstPart}...${lastPart}`;
    }
  
    // Load saved wallet address on page load
    function loadWalletAddress() {
      const savedAddress = localStorage.getItem('walletAddress');
      if (savedAddress) {
        walletAddressDisplay.innerHTML = `Connected: ${savedAddress}`;
        disconnectButton.innerHTML = `My account ${formatWalletAddress(savedAddress)}`;
        connectButton.style.display = 'none'; // Hide the connect button

        disconnectButton.style.display = 'inline-block'; // Show the disconnect button
        p2pMarket.style.display = 'inline-block';

      }
    }
  
    loadWalletAddress(); // Call the function when the page loads
  
    // Connect button click event
    connectButton.addEventListener('click', async () => {
      if (window.ethereum) {
        try {
          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
          const walletAddress = accounts[0];
          localStorage.setItem('walletAddress', walletAddress);
  
          walletAddressDisplay.innerHTML = `Connected: ${walletAddress}`;
          disconnectButton.innerHTML = `My account ${formatWalletAddress(walletAddress)}`;
  
          connectButton.style.display = 'none'; // Hide the connect button
          
          disconnectButton.style.display = 'inline-block'; // Show the disconnect button
          p2pMarket.style.display = 'inline-block';

        } catch (error) {
          console.error('Error connecting to MetaMask:', error);
        }
      } else {
        alert('Web3 wallet is not installed. Please install any web3 wallet to use this Tajiri.');
      }
    });
  
    // Disconnect button click event
    disconnectButton.addEventListener('click', () => {
      // Clear wallet address from localStorage and hide disconnect button
      localStorage.removeItem('walletAddress');
      walletAddressDisplay.innerHTML = '';
      
      disconnectButton.style.display = 'none'; // Hide the disconnect button
      p2pMarket.style.display = 'none';


      connectButton.style.display = 'inline-block'; // Show the connect button
      
      alert('You are now disconnected. Please also disconnect from your wallet manually.');
    });
  </script>
  

  <script>
    // Check if Web3 is injected by the browser (e.g., MetaMask)
    if (typeof window.ethereum !== 'undefined') {
        console.log('MetaMask is installed!');
    } else {
        alert('Please install MetaMask!');
    }
    
    // Initialize Web3
    let web3 = new Web3(window.ethereum);
    
    // Smart contract details
    const contractAddress = '0xCF305928F0a2B8E8147815b2F3fd133CD5085Ab9'; // Replace with your contract address
    const safaricomAddress = '0x57FEa3a8DFACF3C6b45d3b4a1d3dc83F40630a9F'
    const contractABI = [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "initialOwner",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "shortName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "longName",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stockPriceEth",
						"type": "uint256"
					}
				],
				"name": "AddedStock",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "stockContract",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stockAmount",
						"type": "uint256"
					}
				],
				"name": "MintedStockForUser",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "shortName",
						"type": "string"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "longName",
						"type": "string"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stockPriceEth",
						"type": "uint256"
					}
				],
				"name": "RemovedStock",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldPrice",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "UpdatedStockPrice",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "shortName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "longName",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "stockPriceEth",
						"type": "uint256"
					}
				],
				"name": "addStock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAllStocks",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "shortName",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "longName",
								"type": "string"
							},
							{
								"internalType": "address",
								"name": "contractAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "stockPriceEth",
								"type": "uint256"
							}
						],
						"internalType": "struct ControlStock.Stock[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "stockContractAddress",
						"type": "address"
					}
				],
				"name": "mintNewStock",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					}
				],
				"name": "removeStock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "newPrice",
						"type": "uint256"
					}
				],
				"name": "setStockPrice",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "stocks",
				"outputs": [
					{
						"internalType": "string",
						"name": "shortName",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "longName",
						"type": "string"
					},
					{
						"internalType": "address",
						"name": "contractAddress",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "stockPriceEth",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		]
    
    const contract = new web3.eth.Contract(contractABI, contractAddress);
    
    // Function to call the mint method
    async function mintStocks() {
        const stockAmount = document.getElementById('amountOfStocks').value;
        const stockPriceEth = document.getElementById('stockPriceEth').value;
        const totalToPay = stockAmount * stockPriceEth;
    
        // Request account access if needed
        await window.ethereum.request({ method: 'eth_requestAccounts' });
    
        const accounts = await web3.eth.getAccounts();
        const account = accounts[0];
    
        try {
            // Call the mint function of the contract
            let tx_details = await contract.methods.mintNewStock(safaricomAddress).send({
                from: account,
                value: web3.utils.toWei(totalToPay.toString(), 'ether') // Send the calculated ETH amount
            });

        // Get the transaction hash
        const transactionHash = tx_details.transactionHash;

        // Set the transaction hash in the span element
        document.getElementById('txHash').textContent = transactionHash;

        // Set the link to the Sepolia Base explorer
        const explorerLink = `https://base-sepolia.blockscout.com/tx/${transactionHash}`;
        const txLinkElement = document.getElementById('txLink');
        txLinkElement.href = explorerLink;
        txLinkElement.textContent = 'View on Sepolia Base explorer';

        document.getElementById('transactionDetails').style.display = 'block';

          
      //  alert('Minting was successful');

        } catch (error) {
            console.error(error);
            alert(error);
        }
    }
    
    // Attach the mintStocks function to the button
    document.querySelector('.btn-outline-primary').addEventListener('click', mintStocks);
    </script>
    

  <script>
    document.getElementById('importTokenBtn').addEventListener('click', async () => {
    const tokenAddress = '0x57FEa3a8DFACF3C6b45d3b4a1d3dc83F40630a9F'; // Replace with your token's contract address
    const tokenSymbol = 'SCOM'; // Replace with your token's symbol (e.g., 'SYM')
    const tokenDecimals = 18; // Number of decimals for your token, typically 18
    const tokenImage = 'https://www.google.com/url?sa=i&url=https%3A%2F%2Ftwitter.com%2Fsafaricomplc&psig=AOvVaw0T0LOH3o_Om9zWbjUbcR0O&ust=1728670501866000&source=images&cd=vfe&opi=89978449&ved=0CBQQjRxqFwoTCMC98q21hIkDFQAAAAAdAAAAABAE'; // Optional: link to a token image

    
    try {
        // Request to add the token to MetaMask
        const wasAdded = await ethereum.request({
            method: 'wallet_watchAsset',
            params: {
                type: 'ERC20', // Specifies that it's an ERC20 token
                options: {
                    address: tokenAddress,
                    symbol: tokenSymbol,
                    decimals: tokenDecimals,
                    image: tokenImage,
                },
            },
        });

        if (wasAdded) {
            console.log('Token was added to MetaMask');
            alert('Token added successfully!');
        } else {
            console.log('Token was not added to MetaMask');
            alert('Token import was rejected.');
        }
    } catch (error) {
        console.error('Error adding token to MetaMask:', error);
        alert(error);
    }
});

  </script>
</body>
</html>